
//1_算数运算符:+ , - ,*,/,
//2_求余运算符 %
//3_赋值运算符 if(a = b)会报错,防止和a == b弄错
    /*
       =      简单的赋值运算，指定右边操作数赋值给左边的操作数。    C = A + B 将 A + B 的运算结果赋值给 C
       +=     相加后再赋值，将左右两边的操作数相加后再赋值给左边的操作数。    C += A 相当于 C = C + A
       -=     相减后再赋值，将左右两边的操作数相减后再赋值给左边的操作数。    C -= A 相当于 C = C - A
       *=     相乘后再赋值，将左右两边的操作数相乘后再赋值给左边的操作数。    C *= A 相当于 C = C * A
       /=     相除后再赋值，将左右两边的操作数相除后再赋值给左边的操作数。    C /= A 相当于 C = C / A
       %=     求余后再赋值，将左右两边的操作数求余后再赋值给左边的操作数。    C %= A is equivalent to C = C % A
       <<=    按位左移后再赋值        C <<= 2 相当于 C = C << 2
       >>=    按位右移后再赋值        C >>= 2 相当于 C = C >> 2
       &=     按位与运算后赋值        C &= 2 相当于 C = C & 2
       ^=     按位异或运算符后再赋值     C ^= 2 相当于 C = C ^ 2
       |=     按位或运算后再赋值       C |= 2 相当于 C = C | 2
      */

//4_比较运算符
    /*
       等于（a == b）
       不等于（a != b）
       大于（a > b）
       小于（a < b）
       大于等于（a >= b）
       小于等于（a <= b）
       恒等（===）和不恒等（!==）这两个比较符来判断两个对象是否引用同一个对象实例
     **/
//5_逻辑运算符
    /*
     逻辑非（!a）
     逻辑与（a && b）
     逻辑或（a || b）
     */

//6_空和运算符??
    //相当于:a != nil ? a! : b
    

//7_区间运算符
    //1_闭区间运算符(1<= a <= 5)
    for  index in 1...5 {
        print("闭区间_\(index) ")
    }
    //2_半开区间运算符(1<= a < 5)
    for index in 1..<5 {
          print("半开区间_\(index)")
      }
    //3_单侧区间运算符(0 <= a <= 2 或者2 <= a <= names.count)
    var names:[Int] = [1,2,3,4]
    for name in names[...2] {
        print("单侧区间_\(name)")
    }
    for name in names[2...] {
        print("单侧区间_\(name)")
    }

//8_位运算符
    //&
    //|
    //^
    //~
var A = 60  // 二进制为 0011 1100
var B = 13 // 二进制为 0000 1101

print("A&B 结果为：\(A&B)")
print("A|B 结果为：\(A|B)")
print("A^B 结果为：\(A^B)")
print("~A 结果为：\(~A)")
